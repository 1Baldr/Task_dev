{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Table","props","state","students","Name","Phone","age","cv","Object","keys","this","map","key","index","toUpperCase","student","email","Cv","type","placeholder","name","onclick","onClick","id","renderTableHeader","renderTableData","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNA0FeA,G,wDAvFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAU,CACR,CAAEC,KAAM,QAASC,MAAO,EAAGC,IAAK,GAAIC,GAAI,IACxC,CAAEH,KAAM,MAAOC,MAAO,EAAGC,IAAK,GAAIC,GAAI,IACtC,CAAEH,KAAM,OAAQC,MAAO,EAAGC,IAAK,GAAIC,GAAI,IACvC,CAAEH,KAAM,OAAQC,MAAO,EAAGC,IAAK,GAAIC,GAAI,MAR1B,E,gEAejB,OADaC,OAAOC,KAAKC,KAAKR,MAAMC,SAAS,IAC/BQ,KAAI,SAACC,EAAKC,GACtB,OAAO,wBAAID,IAAKC,GAAQD,EAAIE,oB,wCAK9B,OAAOJ,KAAKR,MAAMC,SAASQ,KAAI,SAACI,EAASF,GAAW,IAC1CT,EAA2BW,EAA3BX,KAAMC,EAAqBU,EAArBV,MAAOW,EAAcD,EAAdC,MAAOC,EAAOF,EAAPE,GAC5B,OACE,wBAAIL,IAAKR,GACP,4BAAKA,GACL,4BAAKC,GACL,4BAAKW,GACL,4BAAKC,S,+BAOX,OACE,6BACE,6BACE,kCACQ,wCACN,kCACO,IACL,2BAAOC,KAAK,OAAOC,YAAY,YAAYC,KAAK,SAFlD,aAGe,IACb,2BACEF,KAAK,QACLC,YAAY,iBACZC,KAAK,WAGT,oCACQ,2BAAOF,KAAK,MAAMC,YAAY,OAAOC,KAAK,UADlD,wBAGE,2BAAOF,KAAK,OAAOC,YAAY,OAAOC,KAAK,UAf/C,WAiBe,IACb,4BAAQA,KAAK,SAASC,QAAQ,UAAUC,QAAQ,SAAhD,YAKJ,wBAAIC,GAAG,UACP,2BAAOA,GAAG,YACR,+BACE,4BAAKb,KAAKc,qBACTd,KAAKe,oBAGV,6BACE,wCAEA,oKAKA,oL,GA7EUC,IAAMC,YCUNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9cb3aa93.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      students: [\n        { Name: \"Wasif\", Phone: 0, age: 21, cv: \"\" },\n        { Name: \"Ali\", Phone: 0, age: 19, cv: \"\" },\n        { Name: \"Saad\", Phone: 0, age: 16, cv: \"\" },\n        { Name: \"Asad\", Phone: 0, age: 25, cv: \"\" },\n      ],\n    };\n  }\n\n  renderTableHeader() {\n    let header = Object.keys(this.state.students[0]);\n    return header.map((key, index) => {\n      return <th key={index}>{key.toUpperCase()}</th>;\n    });\n  }\n\n  renderTableData() {\n    return this.state.students.map((student, index) => {\n      const { Name, Phone, email, Cv } = student; //destructuring\n      return (\n        <tr key={Name}>\n          <td>{Name}</td>\n          <td>{Phone}</td>\n          <td>{email}</td>\n          <td>{Cv}</td>\n        </tr>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <p>\n            &nbsp;<p>Upload CV</p>\n            <p>\n              Name{\" \"}\n              <input type=\"text\" placeholder=\"Your Name\" name=\"Name\"></input>\n              &nbsp; Email{\" \"}\n              <input\n                type=\"email\"\n                placeholder=\"ABC@domain.com\"\n                name=\"Email\"\n              ></input>\n            </p>\n            <p>\n              Phone <input type=\"tel\" placeholder=\"05**\" name=\"Phone\"></input>\n              &nbsp; &nbsp; CV &nbsp;&nbsp;\n              <input type=\"file\" placeholder=\"file\" name=\"File\"></input>\n            </p>\n            &nbsp;&nbsp;{\" \"}\n            <button name=\"Submit\" onclick=\"Alert()\" onClick=\"clear\">\n              Submit\n            </button>\n          </p>\n        </div>\n        <h1 id=\"title\"></h1>\n        <table id=\"students\">\n          <tbody>\n            <tr>{this.renderTableHeader()}</tr>\n            {this.renderTableData()}\n          </tbody>\n        </table>\n        <div>\n          <h1>About Us</h1>\n\n          <h3>\n            Groub leader &nbsp;&nbsp;&nbsp; Groub member 1 &nbsp;&nbsp;Groub\n            member 2&nbsp;&nbsp; Groub member 3&nbsp;&nbsp; Groub member\n            4&nbsp;&nbsp; Groub member 5\n          </h3>\n          <h4>\n            muath Almutham &nbsp;&nbsp;&nbsp; Abdulhakim Alsunaydi\n            &nbsp;&nbsp;Mohammed Alharbi&nbsp;&nbsp; Bander\n            Almutairi&nbsp;&nbsp; Amna Alrasheedy&nbsp;&nbsp; Wafa AlAnzi\n          </h4>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}